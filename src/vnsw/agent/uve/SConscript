# -*- mode: python; -*-
#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#


Import('AgentEnv')
env = AgentEnv.Clone()

env.CppEnableExceptions()
env.Append(CCFLAGS = ['-fexceptions'])

# Generate the C++ source files
SandeshGenFiles  = env.SandeshGenCpp('interface.sandesh')
SandeshGenFiles += env.SandeshGenCpp('port_bmap.sandesh')
SandeshGenFiles += env.SandeshGenCpp('vrouter.sandesh')
SandeshGenFiles += env.SandeshGenCpp('virtual_machine.sandesh')
SandeshGenFiles += env.SandeshGenCpp('virtual_network.sandesh')
SandeshGenFiles += env.SandeshGenCpp('prouter.sandesh')

SandeshGenSrcs = env.ExtractCpp(SandeshGenFiles)
env.Depends(SandeshGenSrcs,'#/build/lib/' + env['LIBPREFIX'] + 'sandesh' + env['LIBSUFFIX'])
SandeshGenObjs = env.Object(SandeshGenSrcs)

StatsSandeshGenFiles = env.SandeshGenCpp('stats_interval.sandesh')
StatsSandeshGenFiles += env.SandeshGenCpp('uve.sandesh')
StatsSandeshGenSrcs = env.ExtractCpp(StatsSandeshGenFiles)
StatsSandeshGenObjs = env.Object(StatsSandeshGenSrcs)

libuve = env.Library(
    'uve',
    SandeshGenObjs + [
        'agent_uve_base.cc',
        'agent_uve.cc',
        'interface_uve_table.cc',
        'l4_port_bitmap.cc',
        'prouter_uve_table.cc',
        'vm_uve_entry_base.cc',
        'vm_uve_table_base.cc',
        'vn_uve_entry_base.cc',
        'vn_uve_table_base.cc',
        'vrouter_stats_collector.cc',
        'vrouter_uve_entry_base.cc'
    ])

libstatsuve_os_dependent_src = ['vm_stat.cc', 'vm_stat_kvm.cc', 'vm_stat_docker.cc']

libstatsuve = env.Library(
    'statsuve',
    StatsSandeshGenObjs + [
        'agent_uve_stats.cc',
        'interface_uve_stats_table.cc',
        'stats_manager.cc',
        libstatsuve_os_dependent_src,
        'vm_uve_entry.cc',
        'vm_uve_table.cc',
        'vn_uve_entry.cc',
        'vn_uve_table.cc',
        'vrouter_uve_entry.cc',
    ]
)

Import('BuildEnv')
mockEnv = BuildEnv.Clone()

def MapBuildDir(dirs):
    return list(map(lambda x: Dir('../../../' + x).abspath, dirs))

mockEnv.Prepend(LIBS=[
    'ksync',
    'sandeshflow',
    'sandeshvns',
    'sandesh',
    'http',
    'http_parser',
    'process_info',
    'io',
    'sandesh',
    'base',
    'boost_program_options',
    'curl',
    'pugixml',
    'rt',
    'ssl',
    'crypto'
    ])

mockEnv.Append(LIBS = ['rt'])

libpath = MapBuildDir([
    'base',
    'io',
    'ksync',
])
mockEnv.Append(LIBPATH=libpath)
mockEnv.Prepend(CPPPATH = mockEnv['TOP'])
mockgen = mockEnv.Program('mock_generator',
                          ['mock_generator.cc'])
mockEnv.Alias("vrouter:mock_gen", mockgen)

env.SConscript('test/SConscript', exports='AgentEnv', duplicate=0)
