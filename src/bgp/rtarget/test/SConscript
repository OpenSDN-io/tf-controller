#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#

Import('BuildEnv')
import platform
import os

env = BuildEnv.Clone()

env.Append(CPPPATH = [env['TOP'],
                      env['TOP'] + '/bgp',
                      env['TOP'] + '/db',
                      env['TOP'] + '/io'
                     ])

env.Append(LIBPATH = [env['TOP'] + '/base', env['TOP'] + '/base/test',
           env['TOP'] + '/bgp',
           env['TOP'] + '/bgp/ermvpn', env['TOP'] + '/bgp/evpn',
           env['TOP'] + '/bgp/mvpn',
           env['TOP'] + '/bgp/extended-community',
           env['TOP'] + '/bgp/large-community',
           env['TOP'] + '/bgp/inet', env['TOP'] + '/bgp/l3vpn', 
           env['TOP'] + '/bgp/inet6', env['TOP'] + '/bgp/inet6vpn', 
           env['TOP'] + '/bgp/origin-vn', env['TOP'] + '/bgp/routing-instance',
           env['TOP'] + '/bgp/routing-policy',
           env['TOP'] + '/bgp/rtarget', env['TOP'] + '/bgp/security_group',
           env['TOP'] + '/bgp/test', env['TOP'] + '/bgp/tunnel_encap',
           env['TOP'] + '/control-node', env['TOP'] + '/control-node/test',
           env['TOP'] + '/db', env['TOP'] + '/db/test',
           env['TOP'] + '/ifmap', env['TOP'] + '/ifmap/test',
           env['TOP'] + '/io', env['TOP'] + '/net', env['TOP'] + '/route',
           env['TOP'] + '/schema', env['TOP'] + '/xmpp', env['TOP'] + '/xml'])

etcd_incl = os.environ.get('CONTRAIL_ETCD_INCL');

if etcd_incl:
    env.Prepend(LIBS = ['etcdql','protobuf', 'grpc++', 'grpc', 'z'])

env.Prepend(LIBS = ['control_test', 'bgptest', 'bgp', 'peer_sandesh',
                    'control_node', 'dbtest', 'bgp_schema', 'ifmap_vnc',
                    'task_test', 'ifmap_test_util', 'ifmap_test_util_server',
                    'ifmapio', 'ifmap_server', 'ifmap_common', 'config_client_mgr',
                    'pugixml', 'curl', 'crypto', 'ssl', 'sandesh',
                    'http', 'http_parser', 'db', 'sandeshvns', 'io',
                    'process_info', 'base', 'gunit'])

env.Append(LIBS = ['bgp_ermvpn', 'bgp_evpn', 'bgp_mvpn'])
env.Append(LIBS = ['bgp_inet', 'bgp_l3vpn'])
env.Append(LIBS = ['bgp_inet6', 'bgp_inet6vpn'])
env.Append(LIBS = ['routing_instance', 'rtarget', 'route', 'routing_policy', 'net'])
env.Append(LIBS = ['extended_community', 'origin_vn', 'security_group', 'tunnel_encap', 'large_community'])
env.Append(LIBS = ['bgp_xmpp', 'xmpp', 'xmpp_unicast', 
                   'xmpp_multicast', 'xmpp_enet', 'xmpp_mvpn', 'xml', 'pugixml',
                   'boost_regex', 'boost_program_options'])

env.Prepend(LINKFLAGS = [
    '-Wl,--whole-archive',
    '-rdynamic',
    '-lbgp_inet',
    '-lbgp_ermvpn',
    '-lbgp_mvpn',
    '-lbgp_evpn',
    '-lbgp_inet6',
    '-lbgp_inet6vpn',
    '-lbgp_l3vpn',
    '-lrtarget',
    '-Wl,--no-whole-archive'])


env.Append(LIBS=[
    'rt',
    'io',
    'ssl',
    'crypto',
    'cassandra_cql',
    'SimpleAmqpClient',
    'rabbitmq',
    'cassandra',
    'gendb',
    'boost_chrono',
])


rtarget_address_test = env.UnitTest('rtarget_address_test', 
                                    ['rtarget_address_test.cc'])
env.Alias('src/bgp/rtarget:rtarget_address_test', rtarget_address_test)

rtarget_table_test = env.UnitTest('rtarget_table_test', 
                                    ['rtarget_table_test.cc'])
env.Alias('src/bgp/rtarget:rtarget_table_test', rtarget_table_test)

rtarget_prefix_test = env.UnitTest('rtarget_prefix_test', 
                                    ['rtarget_prefix_test.cc'])
env.Alias('src/bgp/rtarget:rtarget_prefix_test', rtarget_prefix_test)

test_suite = [
    rtarget_address_test,
    rtarget_prefix_test,
    rtarget_table_test,
]

test = env.TestSuite('bgp-test', test_suite)
env.Alias('controller/src/bgp/rtarget:test', test)

flaky_test_suite = [
]

flaky_test = env.TestSuite('rtarget-flaky-test', flaky_test_suite)
env.Alias('controller/src/bgp/rtarget:flaky-test', flaky_test)

# Local Variables:
# mode: python
# End:
