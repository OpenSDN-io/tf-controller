#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#

import subprocess
import shutil
import os

Import('BuildEnv')

def MapBuildDir(dirs):
    return list(map(lambda x: '#/' + Dir('.').path + '/../' + x, dirs))

env = BuildEnv.Clone()
env.CppEnableExceptions()
env.Append(CCFLAGS = ['-fexceptions'])

# Generate the source files
SandeshGenFiles  = env.SandeshGenCpp('bgp_peer.sandesh')
SandeshGenFiles += env.SandeshGenOnlyCpp('bgp_peer_internal.sandesh')
SandeshGenFiles += env.SandeshGenCpp('bgp_log.sandesh')
SandeshGenFiles += env.SandeshGenCpp('virtual_network.sandesh')
SandeshGenFiles += env.SandeshGenCpp('vrouter.sandesh')
SandeshGenSrcs = env.ExtractCpp(SandeshGenFiles)

env.Append(CPPPATH = env['TOP'])
env.Append(CPPPATH = [env['TOP'] + '/bgp'])
env.Append(CPPPATH = [env['TOP'] + '/io'])
env.Append(CPPPATH = [env['TOP'] + '/db'])
env.Append(CPPPATH = [env['TOP'] + '/ifmap'])
env.Append(CPPPATH = [env['TOP'] + '/config-client-mgr'])
env.Append(CPPPATH = [env['TOP'] + '/base/sandesh'])
env.Append(CPPPATH = [env['TOP'] + '/tools/sandesh/library/common'])

SandeshPeerFiles = env.SandeshGenCpp('peer_info.sandesh')
SandeshPeerGenSrcs = env.ExtractCpp(SandeshPeerFiles)
libpeer_sandesh = env.Library('peer_sandesh', SandeshPeerGenSrcs);

SandeshTableFiles = env.SandeshGenCpp('sandesh_info.sandesh')
SandeshTableGenSrcs = env.ExtractCpp(SandeshTableFiles)
libsandesh_sandesh = env.Library('sandesh_sandesh', SandeshTableGenSrcs);

libbgp = env.Library('bgp',
                     SandeshGenSrcs +
                     ['bgp_aspath.cc',
                      'bgp_attr.cc',
                      'bgp_attr_base.cc',
                      'bgp_config.cc',
                      'bgp_condition_listener.cc',
                      'bgp_debug.cc',
                      'bgp_evpn.cc',
                      'bgp_export.cc',
                      'bgp_factory.cc',
                      'bgp_lifetime.cc',
                      'bgp_log.cc',
                      'bgp_membership.cc',
                      'bgp_message_builder.cc',
                      'bgp_multicast.cc',
                      'bgp_mvpn.cc',
                      'bgp_origin_vn_path.cc',
                      'bgp_path.cc',
                      'bgp_peer.cc',
                      'bgp_peer_close.cc',
                      'bgp_peer_key.cc',
                      'bgp_proto.cc',
                      'bgp_rib_policy.cc',
                      'bgp_ribout.cc',
                      'bgp_ribout_updates.cc',
                      'bgp_route.cc',
                      'bgp_sandesh.cc',
                      'bgp_server.cc',
                      'bgp_session_manager.cc',
                      'bgp_session.cc',
                      'bgp_show_config.cc',
                      'bgp_show_evpn_table.cc',
                      'bgp_show_multicast_manager.cc',
                      'bgp_show_mvpn_manager.cc',
                      'bgp_show_mvpn_project_manager.cc',
                      'bgp_show_neighbor.cc',
                      'bgp_show_ribout_statistics.cc',
                      'bgp_show_route.cc',
                      'bgp_show_route_summary.cc',
                      'bgp_show_routing_instance.cc',
                      'bgp_show_rtarget_group.cc',
                      'bgp_table.cc',
                      'bgp_update.cc',
                      'bgp_update_monitor.cc',
                      'bgp_update_queue.cc',
                      'bgp_update_sender.cc',
                      'community.cc',
                      'message_builder.cc',
                      'peer_close_manager.cc',
                      'peer_stats.cc',
                      'state_machine.cc',
                      ])

# ifmap based BGP configuration used by the control-node
libbgp_ifmap_config = env.Library('bgp_ifmap_config',
                                  [
                                      'bgp_config_ifmap.cc',
                                      'bgp_config_listener.cc',
                                      'bgp_config_parser.cc',
                                      'bgp_ifmap_sandesh.cc',
                                      'bgp_show_ifmap_peering_config.cc',
                                  ])

libbgp_xmpp = env.Library('bgp_xmpp',
                          [
                              'bgp_xmpp_channel.cc',
                              'bgp_xmpp_peer_close.cc',
                              'bgp_xmpp_sandesh.cc',
                              'xmpp_message_builder.cc',
                              'bgp_xmpp_rtarget_manager.cc',
                          ])

libbgp_yaml_config = env.Library('bgp_yaml_config',
                                 [
                                     'bgp_config_yaml.cc',
                                 ])

env.SConscript('ermvpn/SConscript', exports='BuildEnv', duplicate = 0)
env.SConscript('evpn/SConscript', exports='BuildEnv', duplicate = 0)
env.SConscript('inet/SConscript', exports='BuildEnv', duplicate = 0)
env.SConscript('inet6/SConscript', exports='BuildEnv', duplicate = 0)
env.SConscript('inet6vpn/SConscript', exports='BuildEnv', duplicate = 0)
env.SConscript('l3vpn/SConscript', exports='BuildEnv', duplicate = 0)
env.SConscript('mvpn/SConscript', exports='BuildEnv', duplicate = 0)
env.SConscript('origin-vn/SConscript', exports='BuildEnv', duplicate = 0)
env.SConscript('routing-policy/SConscript', exports='BuildEnv', duplicate = 0)
env.SConscript('routing-instance/SConscript', exports='BuildEnv', duplicate = 0)
env.SConscript('rtarget/SConscript', exports='BuildEnv', duplicate = 0)
env.SConscript('security_group/SConscript', exports='BuildEnv', duplicate = 0)
env.SConscript('tunnel_encap/SConscript', exports='BuildEnv', duplicate = 0)
env.SConscript('extended-community/SConscript', exports='BuildEnv', duplicate = 0)
env.SConscript('large-community/SConscript', exports='BuildEnv', duplicate = 0)

env.SConscript('test/SConscript', exports='BuildEnv', duplicate = 0)

#env.SConscript('daemon/SConscript', exports='BuildEnv', duplicate = 0)

# Local Variables:
# mode: python
# End:
